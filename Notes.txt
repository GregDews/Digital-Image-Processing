Possible libraries to replace matlab

numpy - for OpenCV
Scipy
Pillow?
OpenCV


Noise exercises?
    Gaussian Noise      Randn()
    Uniform Noise       Rand()
    Rayleigh Noise      a+sqrt(-b*ln(1-U(0,1))) //U is random? matrix
    Exponential Noise   -(1/a)*ln(1-U(0,1))
    Salt & Pepper       ?
                                Matlab uses natural log for Log method

Morphological image processing
    structuring element
        define small matrix with 1's for included points
    dilation and erosion, boundary
        dilation
            copy of B and shift this reflection by z
            keep the set of all values that are covered by B as
            the center is placed on every location of A
            (expand one shape with traits of other shape)
        erosion
            copy of B and shift this reflection by z
            keep only where B is fully covered by (contained in) A
            (shrink one shape by traits of other shape)
        open (A o B)
            erosion, then dilation
        closing (A â‹… B)
            dilation, then erosion
        
    fill the hole
        use of dilation/erosion with various sizes to fill in specified shapes

    convex hull

    mathematical Morphology
        set theory
            not - obvious
            and - only overlapping area
            or  - combined total
            xor - cut out union but keep indiv.

(10/9) Slide11.pdf - Facial Recognition project
            hintcode only runs on 4 person data set
                enroll folder for training

    recommend reading through PCA Face Recognition
    Midterm project report
        eigen face plots

            Training---
            recommend finding a reshape function in numpy

            scan matrix row by row to flatten for each image
            average all images for Xi (person id)
                (im01_01 + im01_ 02 + im01_04) / 3 = X1
            mean average of entire data set (Me) (in project, only of training data set)
            Ai = Xi - Me
            calc eigenvector of A*A' -> P
            calc the weight of training data projected into eigenspace wt_A = P'*A
                P' (eigenvalue)

        CMC curve - Cumulative Math Characteristic
            resulting scores sorted and ranked
            first guess is first rank - performance is percentage of correct values
            only change incorrect guesses, and use next least euclid dst for second rank
            since only incorrect are changed, CMC curve should always rise

                True Positive Identification Rate
        presentation
            should talk about why the approach is different 
        grades
            performance  10pt
            report       10pt
            presentation  5pt (Due October 22nd)

        for project
            Add photos of yourself (Homework 3)
                multiple facial expressions
                mask out background
                if you have neck included, keep consistent across all images
            testing---
                input - Me = Bi
                P'Bi = wt_B (single vector with eigenvector quantities)
                compare wt_B to each column of wt_A , if matching, it is that person
            
            adding efficiency to training
                shortcutting 2500 x 2500 array problem
                find eigenvector of A'A = P2 (40x40)
                 rather than A*A' (2500x2500)
                 A'*A * P2 = lamdaP2
                 A A' A P2 = lamda A P2
                 AA' Q = lamda Q 
                 AA' P = lamda P
                 ... therefore A P2 = P, or A (A'A)
            CMC curve - hint code in slides/codes posted
                rank 1 to 10


    Python coding notes
        numpy.transpose(matrix) to transpose
        reshape is numpy method
    Matlab coding notes
        provides code to plot eigenfaces in FaceRecognitionDemo4Persons.m
        4 person example is roughly the same as what is needed for project
            will need to adjust averages for larger data set
            also adjust result answer key based on what you load
    Project recommendations
        Check faceRecoganition4faces.pdf for example of report?
        will discuss more by next time. Recommend download sample code and try

(10/14) Image Quality Assessment
            Image_quality)metrics.pdf - referenced on slide
        
        subjective - concerned with how image is perceived by a viewer's opinion 
            Mean Opinion Score (MOS) - average of ratings
                Bad, Poor, Fair, Good, Excellent (1-5)
        
        objective - mathematical models that approx. results of Quality
            need to develop quantitative measures that can predict perceived Quality

        three types of objective evaluation
            Full Reference - direct comparison
                Mean Square Error
                    (1/MxN) epsyl(i-m) epsyl(j-n) (X_ij - Y_ij)^2
                    (average squared difference of each pixel, smaller result is less error)


                PSNR - based on Mean Square Error
                    10 log_10 (L^2/MSE)
                    *L is dynamic range of pixel values
                    (Larger value of PSNR means less error)
                
                SSIM measurement system - Structural Similarity Index
                    luminance and contrast comparisons for a given neighborhood combined using 3 separate scores
                    l(x,y) = 2mux muy + c1 / mux^2 + muy^2 + c1         average - mu
                    c(x,y) = 2delx dely + c2 / delx^2 + dely^2 + c2     variance - del
                    s(x,y) = delxy + c3 / delx * dely + c3              covariance - delxy
                            c3 = c2/2
                    SSIM(x,y) = (l * c * s) #specific form within 0-1 where 1 is no error found
                    
                    Demo code uses Mean SSIM - to include multiple neighborhoods

                uses:
                    monitor control image Quality
                    benchmark image processing systems
                    optimize algorithms and parameters
                    help home users better manage their digital photos and evaluate their expertise in photography

    Exercise - on wednesday

(10/16)
    !!!!required reading!!!!
    Graph-based visual saliency 
    
    Talk about more new stuffs, then exercise

    Visual Saliency: visual focus estimation
        a more salient area is more attractive to the eye
        models: original by itti - 1998 (paper focuses on mathematical principles / algorithms)
            Shannon self-information (same lab, but diff author Bruce 2005)
            Incorporating temporal dynamics (itti 2009)
    L. Itti's approach (Bottom-up approach)
        input->Gaussian pyramids->colors|intensity|orientations->feature maps->conspicuity maps->combine into saliency map

        find raw features: intensity changes, color changes, edges
        orientation features: angles of the lines
            use sobel at certain angles? (find horizon, or trends of directions)
        distance also matters - downsample incrementally by scaling down and make each equally important

        center-surround difference - how much something contrasts to the surrounding environment
            matrix of difference from one pixel to the other pixels
            weighted dissimilarity
                Gaussian model to show ratio of distance weight based on current location - for smooth distribution
                how far down you scale matters - practice practice practice
        
        equilibrium state of Markov chain - most obvious, that are closer, become more obvious, outliers and less obvious are diminished

    MIT benchmark of saliency - Judd et. all and ... better performance but based on itti

(10/23) Project info
    Demo in matlab goes by column
    covariance matrix is P aka (A A')
        demo code calcs (A' A) = P2
        A(44, 1000) * P2(44,44) = P

        A1 is average of 5 pictures for person 1 A2 is average of 5 pictures for person 2, etc

        P' A = wt_A
        P' is [e1 ->, e2 ->,...]  ->
        A is [a11, a21, a31,...]  V V
        wt_A

    python demo code
        Project1_train.py
        did not use efficent version, just original of (A A') for  P
        X_flat[43, 1000] #100 x 100 pictures
         using original way eigenvectors will be 10000x10000
        P'A is normal Wt_A will have row per person aka single vector per person

        wt_A.npy, mean_vect.npy are saved for use in testing
        utility file has useful methods for processing the training
        
        need to load results
